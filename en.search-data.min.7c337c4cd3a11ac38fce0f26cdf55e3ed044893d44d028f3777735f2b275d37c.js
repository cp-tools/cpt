'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/cpt/docs/setup/browser/','title':"Browser",'section':"Setup",'content':"Browser #  All website related functions (fetch, submit, list etc) are executed using an automated, headless browser instance (using the DevTools protocol; controlled using go-rod/rod). This setup is important if you wish to use website related features.\nNo data of your browser is modified in this method. See this for more details on the process behind the browser automation.  Browser settings can be configured, both at the global as well as the module level. Shown below is a snippet of the browser configuration for Google Chrome on Linux. (refer here for details about the different configuration files)\ncpt.yaml browser: binary: /opt/google/chrome/google-chrome profile: /home/infinitepro/.config/google-chrome  Not all browsers are supported. Refer here for the list of supported browsers.    Navigate to chrome://version/ or edge://version/, depending on your browser. Copy the value of key Executable Path as the binary. Copy the value of key Profile Path (strip the suffix /Default) as the profile.  Screencast #  "});index.add({'id':1,'href':'/cpt/docs/installation/','title':"Installation",'section':"Docs",'content':"Installation #  The below instructions are for first time users only. Existing users can upgrade using:\ncpt upgrade --mode s   GitHub Release #  Download the tarball corresponding to your system from the latest release page. Extract the executable from the archive and follow the instructions given below, according to your OS.\nLinux/MacOS\nZsh users may need to use .zshrc instead of .bashrc.\n Linux Move the executable to the following directory,\n/home/\u0026lt;username\u0026gt;/.local/bin where \u0026lt;username\u0026gt; is your system username.\nTo add the above directory to the system PATH, follow this.\nMacOS Move the executable to the following directory,\n/usr/local/bin You may require sudo access to do this.\nWindows Move the executable to the following directory,\nC:\\Program Files\\ To add the above directory to the system PATH, follow this.\n Source Build #  To build from source, execute the following commands.\ngit clone https://github.com/cp-tools/cpt.git cd cpt/ go install -ldflags \u0026#34;-s -w\u0026#34; Ensure that the $GOBIN directory is present in the system PATH.\nVerification #  You may need to re-login to your desktop session, for the command to be picked up from the system PATH.  A successful installation would output text similar to\ncpt version vX.Y.Z on running the command cpt --version.\nCheckers #  Checkers are used by the test module to validate a solution output against the expected output. This step can be omitted, if you instead wish to use your set of custom checkers.\nA set of default checkers are available at cp-tools/cpt-checker. To install/upgrade the checkers:\ncpt upgrade --mode c "});index.add({'id':2,'href':'/cpt/docs/setup/','title':"Setup",'section':"Docs",'content':"Setup #  CPT is pre-configured, to match the requirements of a majority of users. Two configurations however, need to be manually set by the user - browser and template - to enable many core functionalities.\nRefer the subsections (from the side menu) for respective configuration instructions.\nOverview #  All configuration data is stored in yaml files, at CONFIG_DIR/cp-tools/cpt/, where value of CONFIG_DIR is determined by os.UserConfigDir()\nThe configurations are broken down by submodule, and are parsed in the following order:\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR id1(Global)-- id2(Checker)-- id3(Submodule)-- id3-- id4(Local)  Checker configurations are present at CONFIG_DIR/cp-tools/cpt-checker/. Submodules are recursively loaded, in the order they are called. Local configurations are loaded from the file meta.yaml in the current directory. If the same key is present in multiple configurations, the value from the last parsed configuration file containing the key, is considered.  "});index.add({'id':3,'href':'/cpt/docs/setup/template/','title':"Template",'section':"Setup",'content':"Template #  Templates are core components of cpt, and configuration of the same is required to use two of the most powerful features of cpt - test and submit.\nTemplates are stored under global settings. Shown below is a snippet of the template configuration for the language C++ on Linux (refer here for details about the different configuration files).\ncpt.yaml template: cpp: codeFile: /home/admin/Documents/template.cpp preScript: g++ \u0026#34;{{.file}}\u0026#34; runScript: ./a.out postScript: rm a.out codeforces.yaml template: cpp: language: GNU G++17 7.3.0  Alias #  The alias is an unique name given to every template, to differentiate it from other configured templates. In the template above, cpp is the alias value.\nThe alias should be alpha-numeric and not contain any whitespaces. Alias names are case sensitive, and must be different from other aliases.\nCode File #  Code file/template code is the skeleton code you use in every solution. Save this template code (it can be empty too!) in a file and ensure the file stays in one location. The code from this file is duplicated when cpt generate is run.\nTemplates also support variable placeholders, parsed using the text/template package of golang. Presently, the following generic placeholders are supported:\n{{.date}} - Current date, in dd.mm.yyyy format {{.time}} - Current time, in hh:mm format Dynamic placeholders are supported too, with values fed from the local configuration (meta.yaml in the current directory).\nPresented below is an example showing the local configuration, template file and generated code. meta.yaml problem: name: Binary Table (Hard Version) memoryLimit: 256 megabytes inputStream: standard input outputStream: standard output customFlag: addCredits: true template.cpp /* Date: {{.date}} | Time: {{.time}} {{if .customFlag.addCredits -}} Credits: cp-tools {{- end}} {{if .problem.name -}} Problem: {{.problem.name}} {{- end}} {{if .problem.timeLimit -}} Time limit: {{.problem.timeLimit}} {{- end}} */ #include\u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main(){ // Enter code here...  return 0; } gen.cpp /* Date: 18.11.2020 | Time: 13:48 Credits: cp-tools Problem: Binary Table (Hard Version) */ #include\u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main(){ // Enter code here...  return 0; }  Test Scripts #  Test scripts are required exclusively by cpt test - the testing module - and specify the compilation (prescript), execution (runscript) and cleanup (postscript) commands to be executed.\nTest scripts also support the following generic placeholders:\n{{.file}} - The solution code file specifed to test {{.fileBasename}} - The name of the file, without the extension Prescript (optional) #  This script is executed before the testing. The intended usecase is to compile your solution file. Interpreted languages like Python and Golang may leave this blank.\nRunscript (required) #  This script is executed once per test case. This command is meant to run the compile binary (for compiled languages) or launch the solution file (for interpreted languages).\nTest case input/output must be read from/written to the standard input/standard output. Hence, don\u0026rsquo;t pipe text streams in your solution or runscript.  For problems that require file input/file output, the current workaround is to use local flags or environment variables to switch between standard input/standard output and file input/file output. This issue shall be addressed in upcoming updates.\nPostscript (optional) #  This script is executed after the testing. The intended usecase is to clean up residual files (executables, log files etc). May be left blank if not required.\nLanguage #  The value of this key differs from site to site, and is thus configured at the module (website) level, rather than the global level.  The value specified here, is the language selected while submitting the code file (corresponding to this template) to the remote judge.\nScreencast #  "});index.add({'id':4,'href':'/cpt/menu/','title':"Menu",'section':"About",'content':"  Installation  Setup   Browser  Template     "});})();